import { MACDResult } from '../common/macdUtils'
import { mapOutputToConfindence } from './stochastic'
import { Stochastic } from 'technicalindicators'
import { StochasticInput } from 'technicalindicators/declarations/momentum/Stochastic'
import { tail, takeRight } from 'lodash'

describe('Stochastic Fast', () => {

  let input: StochasticInput

  beforeEach(() => {
    input = {
      high: [
        1.435456, 1.418541, 1.405144,  1.39833, 1.375424, 1.332524,
        1.347038, 1.362731, 1.378554, 1.369561, 1.363336,  1.36617,
        1.350297, 1.381088, 1.367522, 1.352703, 1.318714, 1.337816,
        1.336481, 1.331544, 1.337867, 1.348218, 1.378188, 1.381088,
        1.368846, 1.367752, 1.373334, 1.389363, 1.378507, 1.372443,
        1.359096, 1.372177, 1.372481,    1.351, 1.331123, 1.321836,
        1.323492,     1.34, 1.349998, 1.348867, 1.326211, 1.333268,
        1.350297, 1.351444, 1.336952, 1.327046, 1.265426, 1.242955,
        1.231491, 1.222621, 1.246993, 1.253226, 1.295764, 1.281547,
        1.238045, 1.244213, 1.248871, 1.238764, 1.229836,  1.23205,
          1.2411, 1.254813, 1.243148, 1.223678, 1.229388, 1.197306,
        1.192262, 1.181723, 1.169024, 1.205697, 1.205918, 1.179625,
        1.179408, 1.176322, 1.153565, 1.137052, 1.142309, 1.166925,
        1.163435, 1.166351, 1.160586, 1.194497, 1.193994, 1.220462,
         1.21891, 1.255337,  1.28167, 1.294737, 1.312735, 1.352611,
        1.314069, 1.307233, 1.321328, 1.277616,  1.25136, 1.251502,
        1.308677, 1.288135, 1.272681, 1.271568
      ],
      low: [
        1.399077, 1.392701, 1.332589, 1.356307,    1.325, 1.296005,
        1.304904, 1.324996, 1.342072, 1.347891, 1.332087, 1.337093,
          1.3063,  1.32806, 1.349583, 1.281496, 1.290547,  1.31239,
        1.305832, 1.311263, 1.319297, 1.332813, 1.346327, 1.351539,
         1.34378, 1.349583, 1.356307, 1.355059, 1.358867, 1.346681,
        1.345437, 1.348975, 1.351539, 1.326273, 1.311263,  1.29641,
        1.307524, 1.319683, 1.328741, 1.302546, 1.308569, 1.304601,
        1.329929, 1.324462, 1.317677,  1.24561, 1.193608, 1.204546,
        1.197648, 1.193472, 1.186256,  1.22672, 1.249427, 1.202197,
        1.191253, 1.204403,  1.10034, 1.196215, 1.202196, 1.209852,
        1.218892, 1.234867,  1.21136, 1.126725, 1.136005, 1.172988,
        1.172021, 1.152753, 1.147974, 1.158971, 1.168439,  1.15634,
        1.165296,  1.14837,  1.07191, 1.092419, 1.108115, 1.122894,
        1.147652, 1.134578, 1.136609, 1.158794, 1.175722,  1.18701,
        1.199955, 1.202565, 1.245356,     1.27, 1.287775, 1.292594,
        1.277783, 1.274852,  1.24985, 1.234094, 1.227554,    1.224,
        1.245245, 1.227508, 1.221075, 1.259401
      ],
      close: [
        1.399077, 1.409489, 1.399368, 1.359767, 1.329337, 1.309131,
        1.342704, 1.362731, 1.350997, 1.357713, 1.357707, 1.341021,
        1.328405, 1.363137, 1.352558, 1.283953, 1.309469,  1.32421,
        1.323208, 1.322914, 1.333278, 1.346421, 1.378188, 1.354929,
        1.355095, 1.363511,  1.36961, 1.363065, 1.378019, 1.349268,
        1.351552, 1.370283, 1.353138, 1.330861, 1.317407, 1.314422,
        1.323492,     1.34, 1.335206, 1.312684, 1.310902, 1.329592,
        1.339697, 1.324462, 1.327429, 1.255916, 1.228816, 1.204546,
        1.222143, 1.203818, 1.230997, 1.248669, 1.275389,   1.2075,
        1.207294, 1.233536, 1.212774, 1.224932, 1.207556,   1.2258,
        1.238102, 1.237149,  1.21484, 1.142554, 1.181267, 1.174114,
         1.18022, 1.160908, 1.162087, 1.202568,  1.16908, 1.160319,
        1.175674, 1.150634, 1.111935, 1.112884, 1.124325, 1.159231,
        1.154822, 1.144702, 1.159722,  1.18706,  1.18681, 1.220462,
        1.200607, 1.244981, 1.277485, 1.287252, 1.311677, 1.297335,
        1.288364, 1.274852, 1.269811, 1.244604, 1.227554, 1.245095,
        1.285928, 1.234079,  1.26764, 1.261605
      ],
      period: 14,
      signalPeriod: 3
    }
  })

  it('should return high conficence as K value is below D', () => {
    const confidence = mapOutputToConfindence(1, 2)
    expect(confidence).toBe(0.8)
  })

  it('should return middle conficence as K value is below D', () => {
    const confidence = mapOutputToConfindence(1, 5)
    expect(confidence).toBe(0.5)
  })


  it('should fail as K value is way below D', () => {
    const confidence = mapOutputToConfindence(1, 8)
    expect(confidence).toBe(0)
  })

  it('should be extremely confident as K value is way above D', () => {
    const confidence = mapOutputToConfindence(30, 10)
    expect(confidence).toBe(1)
  })

  it('play around with Stoachastic indicator', () => {

    const newInput = {
      high: takeRight(input.high, 50),
      low: takeRight(input.low, 50),
      close: takeRight(input.close, 50),
      period: 14,
      signalPeriod: 3
    }

    expect(newInput.close.length).toBeLessThan(input.close.length)

    // 21 + 25
    const result1 = Stochastic.calculate(input)
    const result2 = Stochastic.calculate(newInput)

    expect(takeRight(result1, 1)['k']).toEqual(takeRight(result2, 1)['k'])
    expect(takeRight(result1, 1)['d']).toEqual(takeRight(result2, 1)['d'])

  })

})
